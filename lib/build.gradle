plugins {
    id 'java-library'
    id 'eclipse'
    id 'maven-publish'
}

import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.3.1"

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
			? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
			: "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
		break
	case OperatingSystem.WINDOWS:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.contains("64")
			? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
			: "natives-windows-x86"
		break
}

repositories {
    mavenCentral()
}

dependencies {
	def lwjglVersion = "3.3.1"
	api platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

	def lwjglModules = ['', '-glfw', '-opengl', '-stb']
	def lwjglOSes = ['linux', 'linux-arm32', 'linux-arm64',
		'macos', 'macos-arm64',
		'windows', 'windows-arm64', 'windows-x86']
	
	lwjglModules.each { lwjglModule -> 
		api "org.lwjgl:lwjgl${lwjglModule}"
		lwjglOSes.each { lwjglOS -> 
			runtimeOnly "org.lwjgl:lwjgl${lwjglModule}::natives-${lwjglOS}"
		}
	}
	
	api 'com.fasterxml.jackson.core:jackson-annotations:2.13.3'
	api 'com.fasterxml.jackson.core:jackson-core:2.13.3'
	api 'com.fasterxml.jackson.core:jackson-databind:2.13.3'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
}

sourceSets {
	main {
		java {
			srcDirs "src/main/java"
		}
	}
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('jar') {
	archivesBaseName = 'Ridhvl2'
	archiveVersion = version;
}

tasks.named('javadoc'){
	source = sourceSets.main.java
	classpath = sourceSets.main.runtimeClasspath
}

task sourcesJar(type: Jar, dependsOn: classes){
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	classifier = 'sources'
	from sourceSets.main.java
}

task javadocJar(type: Jar, dependsOn: javadoc){
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

publishing {
    repositories {
        maven {
            name = "Ridhvl2"
            url = uri("https://maven.pkg.github.com/osreboot/ridhvl2")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            
            artifact(sourcesJar)
            artifact(javadocJar)
            
            groupId = group
            artifactId = "ridhvl2"
        }
    }
}